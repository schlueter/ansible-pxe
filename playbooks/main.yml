---
- hosts: pxe
  gather_facts: yes
  become: yes
  vars:
    network_install_http_root: /srv/network-install
    tftp_boot_root: /var/lib/tftpboot
    isos_mount_directory: /mnt/isos
    kickstart_wsgi_app_dir: /srv/kickstart
    kickstart_wsgi_app: "{{ kickstart_wsgi_app_dir }}/app.py"
  tasks:
    - name: Install prerequisite apt packages
      apt: update_cache=yes state=latest name='{{ item }}' cache_valid_time=20000
      with_items:
        - dnsmasq
        - nginx
        - syslinux
        - pxelinux
        - uwsgi
        - uwsgi-plugin-python
        - python-jinja2
        - python-yaml

    # Configure Dnsmasq
    - name: Configure Dnsmasq with /etc/dnsmasq.conf
      template: src=templates/etc/dnsmasq.conf dest=/etc/
      notify: Restart dnsmasq

    # Setup PXE
    - name: Make tftp boot directories
      file: state=directory path={{ tftp_boot_root }}/{{ item }}/
      with_items:
        - pxelinux.cfg
        - memtest

    - name: Copy image for pxe menu background
      copy: src=r29.jpg dest={{ tftp_boot_root }}/

    - name: Copy pxe files from pxelinux
      copy:
        remote_src=yes
        src=/usr/lib/PXELINUX/{{ item }}
        dest={{ tftp_boot_root }}/
      with_items:
        - pxelinux.0

    - name: Copy pxe files from pxelinux
      copy:
        remote_src=yes
        src=/usr/lib/syslinux/modules/bios/{{ item }}
        dest={{ tftp_boot_root }}/
      with_items:
        - vesamenu.c32
        - reboot.c32
        - vesainfo.c32
        - ldlinux.c32
        - libcom32.c32
        - libutil.c32

    - name: Create pxe boot menu
      template:
        src=templates/var/lib/tftpboot/pxelinux.cfg/default
        dest={{ tftp_boot_root }}/pxelinux.cfg/

    - name: Download Memtest
      get_url:
        dest=/vagrant/memtest86+-5.01.bin.gz
        url=http://www.memtest.org/download/5.01/memtest86+-5.01.bin.gz
        checksum=md5:14ec4c4d827a49629c41b499303355ed

    - name: Decompress memtest
      command:
        gunzip --keep /vagrant/memtest86+-5.01.bin.gz
        creates=/vagrant/memtest86+-5.01.bin

    - name: Make memtest available for boot
      copy:
        src=/vagrant/memtest86+-5.01.bin
        dest={{ tftp_boot_root }}/memtest/memtest
        remote_src=yes

    # Setup Install disk
    - name: Create mount directories
      file:
        state=directory
        path={{ isos_mount_directory }}/{{ item.name }}
      with_items: "{{ install_isos }}"

    - name: Download install isos
      get_url:
        dest=/vagrant/{{ item.name }}.iso
        url={{ item.url }}/{{ item.filename | default(item.name) }}.iso
        checksum={{ item.checksum }}
      with_items: "{{ install_isos }}"

    - name: Mount install isos
      mount:
        name={{ isos_mount_directory }}/{{ item.name }}
        src=/vagrant/{{ item.name }}.iso
        fstype=iso9660
        state=mounted
      with_items: "{{ install_isos }}"

    - name: Create boot directories for isos
      file:
        state=directory
        path={{ tftp_boot_root }}/{{ item.name }}
      with_items: "{{ install_isos }}"

    - name: Copy boot files for isos
      copy:
        remote_src=yes
        src={{ isos_mount_directory }}/{{ item.0.name }}/{{ item.1 }}
        dest={{ tftp_boot_root }}/{{ item.0.name}}
      with_subelements:
        - "{{ install_isos }}"
        - boot_files

    # Setup wsgi app to serve kickstart files
    - name: Make app dir
      file: state=directory path=/srv/kickstart/

    - name: Install python wsgi app
      template:
        src=templates/{{ kickstart_wsgi_app }}
        dest={{ kickstart_wsgi_app }}
      notify: Restart uwsgi

    - name: Install uwsgi config for kickstart app
      template:
        src=templates/etc/uwsgi/apps-available/kickstart.ini
        dest=/etc/uwsgi/apps-available/kickstart.ini
      notify: Restart uwsgi

    - name: Link kickstart uwsgi config to enabled directory
      file:
        state=link
        src=../apps-available/kickstart.ini
        path=/etc/uwsgi/apps-enabled/kickstart.ini
      notify: Restart uwsgi

    - name: Install kickstart app data
      copy:
        dest={{ kickstart_wsgi_app_dir }}/host_vars.yml
        content="{{ kickstart_host_vars | to_nice_yaml }}"

    - name: Copy kickstart template files
      copy:
        src=files/srv/kickstart/templates
        dest={{ kickstart_wsgi_app_dir }}/

    # Setup Nginx to serve the install disk and kickstart
    - name: Install network-install nginx config from template
      template:
        src=templates/etc/nginx/sites-available/network-install.conf
        dest=/etc/nginx/sites-available/
      notify: Restart nginx

    - name: Link network-install nginx config to enabled directory
      file:
        state=link
        src=../sites-available/network-install.conf
        path=/etc/nginx/sites-enabled/network-install.conf
      notify: Restart nginx

    - name: Remove default nginx site
      file: state=absent path=/etc/nginx/sites-enabled/default
      notify: Restart nginx

  handlers:
    - name: Restart dnsmasq
      service:  name=dnsmasq state=restarted enabled=yes

    - name: Restart nginx
      service: name=nginx state=restarted enabled=yes

    - name: Restart uwsgi
      service: name=uwsgi state=restarted enabled=yes
